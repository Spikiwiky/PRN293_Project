@page
@using EcommerceFrontend.Web.Models.Admin
@model EcommerceFrontend.Web.Pages.Admin.Products.CreateModel
@{
    ViewData["Title"] = "Create Product";
}

<div class="container-fluid">
    <h2>Create Product</h2>

    <form method="post" enctype="multipart/form-data">
        <div class="row">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-body">
                        <div class="mb-3">
                            <label asp-for="Product.ProductName" class="form-label">Product Name</label>
                            <input asp-for="Product.ProductName" class="form-control" required />
                            <span asp-validation-for="Product.ProductName" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Product.Description" class="form-label">Description</label>
                            <textarea asp-for="Product.Description" class="form-control" rows="3"></textarea>
                            <span asp-validation-for="Product.Description" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Product Variants</label>
                            <div id="variants-container">
                                <div class="variant-item mb-3 border p-3 rounded">
                                    <div class="row">
                                        <div class="col-md-3">
                                            <label class="form-label">Size</label>
                                            <select class="form-select" name="Product.Variants[0].Size" required>
                                                <option value="">Select Size</option>
                                                @foreach (var size in ProductConstants.ValidSizes)
                                                {
                                                    <option value="@size">@size</option>
                                                }
                                            </select>
                                        </div>
                                        <div class="col-md-3">
                                            <label class="form-label">Color</label>
                                            <select class="form-select color-select" name="Product.Variants[0].Color" required>
                                                <option value="">Select Color</option>
                                                @foreach (var color in ProductConstants.ValidColors)
                                                {
                                                    <option value="@color" data-color="@ProductConstants.ColorHexCodes[color]">@color</option>
                                                }
                                            </select>
                                        </div>
                                        <div class="col-md-2">
                                            <label class="form-label">Price</label>
                                            <input type="number" class="form-control" name="Product.Variants[0].Price" required min="0" step="0.01" />
                                        </div>
                                        <div class="col-md-2">
                                            <label class="form-label">Stock</label>
                                            <input type="number" class="form-control" name="Product.Variants[0].StockQuantity" required min="0" />
                                        </div>
                                        <div class="col-md-2">
                                            <label class="form-label">Featured</label>
                                            <div class="form-check mt-2">
                                                <input type="checkbox" class="form-check-input" name="Product.Variants[0].IsFeatured" value="true" />
                                                <label class="form-check-label">Is Featured</label>
                                            </div>
                                        </div>
                                        <input type="hidden" name="Product.Variants[0].Categories" value="Default" />
                                    </div>
                                </div>
                            </div>
                            <button type="button" class="btn btn-secondary" onclick="addVariant()">
                                <i class="fas fa-plus"></i> Add Variant
                            </button>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Product.ProductCategoryId" class="form-label">Category</label>
                            <select asp-for="Product.ProductCategoryId" asp-items="Model.Categories" class="form-select" required>
                                <option value="">Select Category</option>
                            </select>
                            <span asp-validation-for="Product.ProductCategoryId" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <div class="form-check">
                                <input asp-for="Product.IsFeatured" class="form-check-input" type="checkbox" />
                                <label asp-for="Product.IsFeatured" class="form-check-label">Featured Product</label>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Product.Status" class="form-label">Status</label>
                            <select asp-for="Product.Status" class="form-select">
                                <option value="1">Active</option>
                                <option value="0">Inactive</option>
                            </select>
                            <span asp-validation-for="Product.Status" class="text-danger"></span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <div class="mb-3">
                            <label class="form-label">Product Image URLs</label>
                            <textarea class="form-control" name="Product.ImageUrls" rows="4" placeholder="Enter image URLs, one per line"></textarea>
                            <small class="text-muted">Enter each image URL on a new line</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="mt-3">
            <button type="submit" class="btn btn-primary">Create Product</button>
            <a asp-page="./Index" class="btn btn-secondary">Cancel</a>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        let variantCount = 1;

        function addVariant() {
            const container = document.getElementById('variants-container');
            const newVariant = document.createElement('div');
            newVariant.className = 'variant-item mb-3 border p-3 rounded';
            newVariant.innerHTML = `
                <div class="row">
                    <div class="col-md-3">
                        <label class="form-label">Size</label>
                        <select class="form-select" name="Product.Variants[${variantCount}].Size" required>
                            <option value="">Select Size</option>
                            ${@Html.Raw(Json.Serialize(ProductConstants.ValidSizes))}.map(size => 
                                `<option value="${size}">${size}</option>`
                            ).join('')}
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Color</label>
                        <select class="form-select color-select" name="Product.Variants[${variantCount}].Color" required>
                            <option value="">Select Color</option>
                            ${@Html.Raw(Json.Serialize(ProductConstants.ValidColors))}.map(color => 
                                `<option value="${color}" data-color="${@Html.Raw(Json.Serialize(ProductConstants.ColorHexCodes))}[color]">${color}</option>`
                            ).join('')}
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Price</label>
                        <input type="number" class="form-control" name="Product.Variants[${variantCount}].Price" required min="0" step="0.01" />
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Stock</label>
                        <input type="number" class="form-control" name="Product.Variants[${variantCount}].StockQuantity" required min="0" />
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Featured</label>
                        <div class="form-check mt-2">
                            <input type="checkbox" class="form-check-input" name="Product.Variants[${variantCount}].IsFeatured" value="true" />
                            <label class="form-check-label">Is Featured</label>
                        </div>
                    </div>
                    <input type="hidden" name="Product.Variants[${variantCount}].Categories" value="Default" />
                    <div class="col-md-1">
                        <label class="form-label">&nbsp;</label>
                        <button type="button" class="btn btn-danger form-control" onclick="removeVariant(this)">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `;
            container.appendChild(newVariant);
            variantCount++;
            initializeColorSelects();
        }

        function removeVariant(button) {
            button.closest('.variant-item').remove();
        }

        function initializeColorSelects() {
            document.querySelectorAll('.color-select').forEach(select => {
                Array.from(select.options).forEach(option => {
                    if (option.value) {
                        const color = option.dataset.color;
                        option.style.backgroundColor = color;
                        option.style.color = isLightColor(color) ? 'black' : 'white';
                    }
                });
            });
        }

        function isLightColor(hexColor) {
            const r = parseInt(hexColor.slice(1, 3), 16);
            const g = parseInt(hexColor.slice(3, 5), 16);
            const b = parseInt(hexColor.slice(5, 7), 16);
            const brightness = ((r * 299) + (g * 587) + (b * 114)) / 1000;
            return brightness > 128;
        }

        // Initialize color selects on page load
        document.addEventListener('DOMContentLoaded', initializeColorSelects);
    </script>
} 