@page
@model EcommerceFrontend.Web.Pages.Products.IndexModel
@{
    ViewData["Title"] = "Products";
}

<div class="container mt-4">
    <h1 class="mb-4">Products</h1>

    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @Model.ErrorMessage
        </div>
    }

    <!-- Search Form -->
    <div class="card mb-4">
        <div class="card-body">
            <form method="get" class="row g-3">
                <div class="col-md-4">
                    <label for="name" class="form-label">Product Name</label>
                    <input type="text" class="form-control" id="name" name="name" value="@Model.SearchParams.Name">
                </div>
                <div class="col-md-4">
                    <label for="category" class="form-label">Category</label>
                    <input type="text" class="form-control" id="category" name="category" value="@Model.SearchParams.Category">
                </div>
                <div class="col-md-2">
                    <label for="minPrice" class="form-label">Min Price</label>
                    <input type="number" class="form-control" id="minPrice" name="minPrice" value="@Model.SearchParams.MinPrice">
                </div>
                <div class="col-md-2">
                    <label for="maxPrice" class="form-label">Max Price</label>
                    <input type="number" class="form-control" id="maxPrice" name="maxPrice" value="@Model.SearchParams.MaxPrice">
                </div>
                <div class="col-12">
                    <button type="submit" class="btn btn-primary">Search</button>
                    <a asp-page="./Index" class="btn btn-secondary">Clear</a>
                </div>
            </form>
        </div>
    </div>

    <!-- Products Grid -->
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var product in Model.Products)
        {
            <div class="col">
                <div class="card h-100">
                    @if (product.Images.Any())
                    {
                        <img src="@product.Images.First()" class="card-img-top" alt="@product.Name" style="height: 200px; object-fit: cover;">
                    }
                    <div class="card-body">
                        <h5 class="card-title">@product.Name</h5>
                        <p class="card-text">@product.Description</p>
                        <p class="card-text">
                            <small class="text-muted">Brand: @product.Brand</small><br>
                            <small class="text-muted">Category: @product.CategoryName</small>
                        </p>
                        
                        @if (product.Variants.Any())
                        {
                            <div class="variant-selection mb-3">
                                @{
                                    var firstVariant = product.Variants.First();
                                    var attributes = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, List<string>>>(firstVariant.Attributes);
                                    var attributeNames = attributes?.Keys.ToList() ?? new List<string>();
                                    
                                    // Prepare variant data for JavaScript
                                    var variantData = product.Variants.Select(v => new {
                                        Attributes = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, List<string>>>(v.Attributes),
                                        Variants = v.Variants
                                    }).ToList();
                                }
                                
                                @for (int i = 0; i < attributeNames.Count; i++)
                                {
                                    var attrName = attributeNames[i];
                                    <div class="mb-2 variant-option" 
                                         data-product-id="@product.ProductId"
                                         data-attribute="@attrName"
                                         style="display: @(i == 0 ? "block" : "none")">
                                        <label class="form-label">@attrName:</label>
                                        <select class="form-select variant-select" 
                                                data-product-id="@product.ProductId"
                                                data-attribute="@attrName"
                                                data-index="@i">
                                            <option value="">Select @attrName</option>
                                            @foreach (var value in attributes[attrName].Distinct())
                                            {
                                                <option value="@value">@value</option>
                                            }
                                        </select>
                                    </div>
                                }
                                
                                <div class="selected-price" id="selected-price-@product.ProductId">
                                    <strong>Base Price: $@product.BasePrice.ToString("N2")</strong>
                                </div>
                                
                                <div class="variant-details mt-2" id="variant-details-@product.ProductId" style="display: none;">
                                    <small class="text-muted">
                                        <span class="supplier-info"></span><br>
                                        <span class="material-info"></span>
                                    </small>
                                </div>

                                <script type="application/json" id="variant-data-@product.ProductId">
                                    @Html.Raw(System.Text.Json.JsonSerializer.Serialize(variantData, new System.Text.Json.JsonSerializerOptions 
                                    { 
                                        WriteIndented = false,
                                        PropertyNamingPolicy = System.Text.Json.JsonNamingPolicy.CamelCase
                                    }))
                                </script>
                            </div>
                        }
                        else
                        {
                            <p class="card-text">
                                <strong>Price: $@product.BasePrice.ToString("N2")</strong>
                            </p>
                        }
                    </div>
                    <div class="card-footer">
                        <div class="btn-group w-100">
                            <a asp-page="./Details" asp-route-id="@product.ProductId" class="btn btn-primary">View Details</a>
                            <a asp-page="./Edit" asp-route-id="@product.ProductId" class="btn btn-secondary">Edit</a>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Pagination -->
    @if (Model.TotalPages > 1)
    {
        <nav aria-label="Page navigation" class="mt-4">
            <ul class="pagination justify-content-center">
                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                        <a asp-page="./Index" 
                           asp-route-page="@i"
                           asp-route-name="@Model.SearchParams.Name"
                           asp-route-category="@Model.SearchParams.Category"
                           asp-route-minPrice="@Model.SearchParams.MinPrice"
                           asp-route-maxPrice="@Model.SearchParams.MaxPrice"
                           class="page-link">@i</a>
                    </li>
                }
            </ul>
        </nav>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Handle variant selection
            document.querySelectorAll('.variant-select').forEach(select => {
                select.addEventListener('change', function() {
                    const productId = this.dataset.productId;
                    const attributeName = this.dataset.attribute;
                    const selectedValue = this.value;
                    const currentIndex = parseInt(this.dataset.index);
                    const priceElement = document.getElementById(`selected-price-${productId}`);
                    const detailsElement = document.getElementById(`variant-details-${productId}`);
                    
                    // Get variant data
                    const variantData = JSON.parse(document.getElementById(`variant-data-${productId}`).textContent);
                    
                    // Get all variant options for this product
                    const allOptions = document.querySelectorAll(`.variant-option[data-product-id="${productId}"]`);
                    const allSelects = document.querySelectorAll(`.variant-select[data-product-id="${productId}"]`);
                    
                    if (!selectedValue) {
                        // Reset to base price and hide subsequent options if no value selected
                        const basePrice = this.closest('.card').querySelector('.selected-price').dataset.basePrice;
                        priceElement.innerHTML = `<strong>Base Price: $${basePrice}</strong>`;
                        detailsElement.style.display = 'none';
                        
                        // Hide all subsequent options
                        allOptions.forEach((option, index) => {
                            if (index > currentIndex) {
                                option.style.display = 'none';
                                option.querySelector('select').value = '';
                            }
                        });
                        return;
                    }
                    
                    // Collect all selected values up to current index
                    const selectedAttributes = {};
                    for (let i = 0; i <= currentIndex; i++) {
                        const select = allSelects[i];
                        const attrName = select.dataset.attribute;
                        const value = select.value;
                        if (value) {
                            selectedAttributes[attrName] = value;
                        }
                    }
                    
                    // Find matching variant
                    const matchingVariant = variantData.find(v => {
                        return v.variants.some(variant => 
                            Object.entries(selectedAttributes).every(([key, value]) => 
                                variant[key] === value
                            )
                        );
                    });
                    
                    if (matchingVariant) {
                        const matchingVariantInfo = matchingVariant.variants.find(variant => 
                            Object.entries(selectedAttributes).every(([key, value]) => 
                                variant[key] === value
                            )
                        );
                        
                        if (matchingVariantInfo) {
                            // Update price display
                            priceElement.innerHTML = `<strong>Price: $${parseFloat(matchingVariantInfo.price).toFixed(2)}</strong>`;
                            
                            // Update variant details
                            if (matchingVariantInfo.supplier || matchingVariantInfo.material) {
                                detailsElement.style.display = 'block';
                                detailsElement.querySelector('.supplier-info').textContent = 
                                    matchingVariantInfo.supplier ? `Supplier: ${matchingVariantInfo.supplier}` : '';
                                detailsElement.querySelector('.material-info').textContent = 
                                    matchingVariantInfo.material ? `Material: ${matchingVariantInfo.material}` : '';
                            } else {
                                detailsElement.style.display = 'none';
                            }
                        }
                    }
                    
                    // Show next option if available
                    if (currentIndex < allOptions.length - 1) {
                        const nextOption = allOptions[currentIndex + 1];
                        nextOption.style.display = 'block';
                        
                        // Filter options in next dropdown
                        const nextSelect = nextOption.querySelector('select');
                        const nextAttrName = nextSelect.dataset.attribute;
                        
                        // Get available values for next attribute based on current selection
                        const availableValues = new Set();
                        variantData.forEach(v => {
                            v.variants.forEach(variant => {
                                if (Object.entries(selectedAttributes).every(([key, value]) => 
                                    variant[key] === value
                                )) {
                                    availableValues.add(variant[nextAttrName]);
                                }
                            });
                        });
                        
                        // Update next select options
                        Array.from(nextSelect.options).forEach(option => {
                            if (option.value === "") return; // Skip the "Select" option
                            option.disabled = !availableValues.has(option.value);
                        });
                        
                        // Reset next select value
                        nextSelect.value = '';
                    }
                });
            });
        });
    </script>
}