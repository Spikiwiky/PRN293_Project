@page
@model EcommerceFrontend.Web.Pages.Cart.IndexModel
@{
    ViewData["Title"] = "Giỏ hàng";
}

@section Styles {
    <link rel="stylesheet" href="~/vendor/bootstrap/css/bootstrap.min.css">
    <link rel="stylesheet" href="~/fonts/font-awesome-4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="~/fonts/iconic/css/material-design-iconic-font.min.css">
    <link rel="stylesheet" href="~/fonts/linearicons-v1.0.0/icon-font.min.css">
    <link rel="stylesheet" href="~/vendor/animate/animate.css">
    <link rel="stylesheet" href="~/vendor/css-hamburgers/hamburgers.min.css">
    <link rel="stylesheet" href="~/vendor/animsition/css/animsition.min.css">
    <link rel="stylesheet" href="~/vendor/select2/select2.min.css">
    <link rel="stylesheet" href="~/vendor/daterangepicker/daterangepicker.css">
    <link rel="stylesheet" href="~/vendor/slick/slick.css">
    <link rel="stylesheet" href="~/vendor/MagnificPopup/magnific-popup.css">
    <link rel="stylesheet" href="~/vendor/perfect-scrollbar/perfect-scrollbar.css">
    <link rel="stylesheet" href="~/css/util.css">
    <link rel="stylesheet" href="~/css/main.css">
    <link rel="stylesheet" href="~/css/site.css">
}

<!-- Cart Header -->
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <h2 class="text-center mb-4">
                <i class="fa fa-shopping-cart"></i> Giỏ hàng của bạn
            </h2>
        </div>
    </div>
</div>

<!-- Cart Content -->
<div class="container">

    
    @if (Model.CartItems != null && Model.CartItems.Any())
    {
        <div class="row">
            <!-- Cart Items -->
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fa fa-list"></i> Sản phẩm trong giỏ hàng (@Model.CartItemCount)
                        </h5>
                    </div>
                    <div class="card-body">
                        @foreach (var item in Model.CartItems)
                        {
                            <div class="cart-item mb-3 p-3 border rounded" data-product-id="@item.ProductId" data-variant-id="@(item.VariantId?.ToString() ?? "")">
                                <div class="row align-items-center">
                                    <!-- Product Image -->
                                    <div class="col-md-2 col-4">
                                        <img src="@item.ProductImage" alt="@item.ProductName" class="img-fluid rounded" style="max-height: 80px; object-fit: cover;">
                                    </div>
                                    
                                    <!-- Product Info -->
                                    <div class="col-md-4 col-8">
                                        <h6 class="mb-1">@item.ProductName</h6>
                                        @if (!string.IsNullOrEmpty(item.VariantAttributes))
                                        {
                                            <small class="text-muted">@item.VariantAttributes</small>
                                        }
                                        <div class="text-primary fw-bold">$@(item.Price.ToString("N2"))</div>
                                    </div>
                                    
                                    <!-- Quantity Controls -->
                                    <div class="col-md-3 col-6">
                                        <div class="input-group input-group-sm">
                                            <button class="btn btn-outline-secondary" type="button" onclick="updateQuantity(@item.ProductId, '@(item.VariantId?.ToString() ?? "")', '@(item.VariantAttributes ?? "")', -1)">
                                                <i class="fa fa-minus"></i>
                                            </button>
                                            <input type="number" class="form-control text-center quantity-input" 
                                                   value="@item.Quantity" min="1" max="99"
                                                   onchange="updateQuantityDirect(@item.ProductId, '@(item.VariantId?.ToString() ?? "")', '@(item.VariantAttributes ?? "")', this.value)">
                                            <button class="btn btn-outline-secondary" type="button" onclick="updateQuantity(@item.ProductId, '@(item.VariantId?.ToString() ?? "")', '@(item.VariantAttributes ?? "")', 1)">
                                                <i class="fa fa-plus"></i>
                                            </button>
                                        </div>
                                    </div>
                                    
                                    <!-- Subtotal -->
                                    <div class="col-md-2 col-3">
                                        <div class="text-end">
                                            <div class="fw-bold text-primary">$@((item.Price * item.Quantity).ToString("N2"))</div>
                                        </div>
                                    </div>
                                    
                                    <!-- Remove Button -->
                                    <div class="col-md-1 col-3">
                                        <button class="btn btn-outline-danger btn-sm" onclick="removeFromCart(@item.ProductId, '@(item.VariantId?.ToString() ?? "")', '@(item.VariantAttributes ?? "")')">
                                            <i class="fa fa-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
            
            <!-- Cart Summary -->
            <div class="col-lg-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fa fa-calculator"></i> Tổng đơn hàng
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between mb-2">
                            <span>Tạm tính:</span>
                            <span>$@Model.TotalAmount.ToString("N2")</span>
                        </div>
                        <hr>
                        <div class="d-flex justify-content-between mb-3">
                            <strong style="font-size: 24px; font-weight: bold;">Tổng cộng:</strong>
                            <strong class="text-primary" style="font-size: 28px; font-weight: bold;">$@Model.TotalAmount.ToString("N2")</strong>
                        </div>
                        
                        <button class="btn btn-primary w-100 mb-2" onclick="proceedToCheckout()">
                            <i class="fa fa-credit-card"></i> Tiến hành đặt hàng
                        </button>
                        
                        <a href="/Products" class="btn btn-outline-secondary w-100">
                            <i class="fa fa-arrow-left"></i> Tiếp tục mua sắm
                        </a>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Empty Cart -->
        <div class="row justify-content-center">
            <div class="col-md-6 text-center">
                <div class="card">
                    <div class="card-body py-5">
                        <i class="fa fa-shopping-cart fa-4x text-muted mb-3"></i>
                        <h4 class="text-muted mb-3">Giỏ hàng trống</h4>
                        <p class="text-muted mb-4">Bạn chưa có sản phẩm nào trong giỏ hàng.</p>
                        <a href="/Products" class="btn btn-primary">
                            <i class="fa fa-shopping-bag"></i> Mua sắm ngay
                        </a>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script src="~/vendor/jquery/jquery-3.2.1.min.js"></script>
    <script src="~/vendor/animsition/js/animsition.min.js"></script>
    <script src="~/vendor/bootstrap/js/popper.js"></script>
    <script src="~/vendor/bootstrap/js/bootstrap.min.js"></script>
    <script src="~/vendor/select2/select2.min.js"></script>
    <script src="~/vendor/daterangepicker/moment.min.js"></script>
    <script src="~/vendor/daterangepicker/daterangepicker.js"></script>
    <script src="~/vendor/slick/slick.min.js"></script>
    <script src="~/js/slick-custom.js"></script>
    <script src="~/vendor/parallax100/parallax100.js"></script>
    <script src="~/vendor/MagnificPopup/jquery.magnific-popup.min.js"></script>
    <script src="~/vendor/isotope/isotope.pkgd.min.js"></script>
    <script src="~/vendor/sweetalert/sweetalert.min.js"></script>
    <script src="~/vendor/perfect-scrollbar/perfect-scrollbar.min.js"></script>
    <script src="~/js/main.js"></script>
    
    <script>
        // Helper function to get cookie - Define this first
        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
            return null;
        }
        
        // Debug logging
        console.log('Cart page loaded');
        console.log('CartItems count:', @(Model.CartItems?.Count ?? 0));
        
        // Update quantity with increment/decrement
        function updateQuantity(productId, variantId, variantAttributes, change) {
            try {
                const input = document.querySelector(`[data-product-id="${productId}"][data-variant-id="${variantId || ''}"] .quantity-input`);
                if (!input) {
                    console.error('Quantity input not found');
                    return;
                }
                const newQuantity = Math.max(1, Math.min(99, parseInt(input.value) + change));
                input.value = newQuantity;
                
                // Use increase/decrease endpoints instead of update
                if (change > 0) {
                    increaseCartItem(productId, variantId, change, variantAttributes);
                } else if (change < 0) {
                    decreaseCartItem(productId, variantId, Math.abs(change), variantAttributes);
                }
            } catch (error) {
                console.error('Error in updateQuantity:', error);
            }
        }
        
        // Update quantity directly from input
        function updateQuantityDirect(productId, variantId, variantAttributes, quantity) {
            try {
                const newQuantity = Math.max(1, Math.min(99, parseInt(quantity) || 1));
                updateCartItem(productId, variantId, newQuantity, variantAttributes);
            } catch (error) {
                console.error('Error in updateQuantityDirect:', error);
            }
        }
        
        // Increase cart item quantity
        function increaseCartItem(productId, variantId, quantityToAdd, variantAttributes) {
            try {
                const userId = getCookie('UserId');
                if (!userId) {
                    if (typeof Swal !== 'undefined') {
                        Swal.fire('Lỗi', 'Vui lòng đăng nhập để cập nhật giỏ hàng', 'error');
                    } else {
                        alert('Vui lòng đăng nhập để cập nhật giỏ hàng');
                    }
                    return;
                }
                
                // Ensure variantId is always a number or null
                let variantIdNum = null;
                if (variantId && variantId !== "" && variantId !== "null") {
                    variantIdNum = parseInt(variantId);
                }
                
                const data = {
                    productId: productId,
                    variantId: variantIdNum,
                    quantityToAdd: quantityToAdd,
                    variantAttributes: variantAttributes
                };
                
                console.log('Increasing cart item:', data);
                
                fetch('/api/Cart/increase-by-product', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                })
                .then(response => {
                    console.log('Increase response status:', response.status);
                    return response.json();
                })
                .then(result => {
                    console.log('Increase result:', result);
                    if (result.success) {
                        // Reload page to update totals
                        location.reload();
                    } else {
                        if (typeof Swal !== 'undefined') {
                            Swal.fire('Lỗi', result.message || 'Có lỗi xảy ra', 'error');
                        } else {
                            alert(result.message || 'Có lỗi xảy ra');
                        }
                    }
                })
                .catch(error => {
                    console.error('Error increasing cart:', error);
                    if (typeof Swal !== 'undefined') {
                        Swal.fire('Lỗi', 'Không thể tăng số lượng sản phẩm', 'error');
                    } else {
                        alert('Không thể tăng số lượng sản phẩm');
                    }
                });
            } catch (error) {
                console.error('Error in increaseCartItem:', error);
            }
        }
        
        // Decrease cart item quantity
        function decreaseCartItem(productId, variantId, quantityToRemove, variantAttributes) {
            try {
                const userId = getCookie('UserId');
                if (!userId) {
                    if (typeof Swal !== 'undefined') {
                        Swal.fire('Lỗi', 'Vui lòng đăng nhập để cập nhật giỏ hàng', 'error');
                    } else {
                        alert('Vui lòng đăng nhập để cập nhật giỏ hàng');
                    }
                    return;
                }
                
                // Ensure variantId is always a number or null
                let variantIdNum = null;
                if (variantId && variantId !== "" && variantId !== "null") {
                    variantIdNum = parseInt(variantId);
                }
                
                const data = {
                    productId: productId,
                    variantId: variantIdNum,
                    quantityToRemove: quantityToRemove,
                    variantAttributes: variantAttributes
                };
                
                console.log('Decreasing cart item:', data);
                
                fetch('/api/Cart/decrease-by-product', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                })
                .then(response => {
                    console.log('Decrease response status:', response.status);
                    return response.json();
                })
                .then(result => {
                    console.log('Decrease result:', result);
                    if (result.success) {
                        // Reload page to update totals
                        location.reload();
                    } else {
                        if (typeof Swal !== 'undefined') {
                            Swal.fire('Lỗi', result.message || 'Có lỗi xảy ra', 'error');
                        } else {
                            alert(result.message || 'Có lỗi xảy ra');
                        }
                    }
                })
                .catch(error => {
                    console.error('Error decreasing cart:', error);
                    if (typeof Swal !== 'undefined') {
                        Swal.fire('Lỗi', 'Không thể giảm số lượng sản phẩm', 'error');
                    } else {
                        alert('Không thể giảm số lượng sản phẩm');
                    }
                });
            } catch (error) {
                console.error('Error in decreaseCartItem:', error);
            }
        }
        
        // Update cart item via AJAX
        function updateCartItem(productId, variantId, quantity, variantAttributes) {
            try {
                const userId = getCookie('UserId');
                if (!userId) {
                    if (typeof Swal !== 'undefined') {
                        Swal.fire('Lỗi', 'Vui lòng đăng nhập để cập nhật giỏ hàng', 'error');
                    } else {
                        alert('Vui lòng đăng nhập để cập nhật giỏ hàng');
                    }
                    return;
                }
                
                // Ensure variantId is always a number or null
                let variantIdNum = null;
                if (variantId && variantId !== "" && variantId !== "null") {
                    variantIdNum = parseInt(variantId);
                }
                
                const data = {
                    productId: productId,
                    variantId: variantIdNum,
                    quantity: quantity,
                    variantAttributes: variantAttributes // Pass variantAttributes
                };
                
                console.log('Original variantId:', variantId);
                console.log('Original variantId type:', typeof variantId);
                console.log('JSON stringified data:', JSON.stringify(data));
                
                console.log('Updating cart item:', data);
                console.log('variantId type:', typeof data.variantId);
                console.log('variantId value:', data.variantId);
                console.log('Original variantId:', variantId);
                console.log('Original variantId type:', typeof variantId);
                console.log('JSON stringified data:', JSON.stringify(data));
                
                fetch('/api/Cart/update', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                })
                .then(response => {
                    console.log('Update response status:', response.status);
                    return response.json();
                })
                .then(result => {
                    console.log('Update result:', result);
                    if (result.success) {
                        // Reload page to update totals
                        location.reload();
                    } else {
                        if (typeof Swal !== 'undefined') {
                            Swal.fire('Lỗi', result.message || 'Có lỗi xảy ra', 'error');
                        } else {
                            alert(result.message || 'Có lỗi xảy ra');
                        }
                    }
                })
                .catch(error => {
                    console.error('Error updating cart:', error);
                    if (typeof Swal !== 'undefined') {
                        Swal.fire('Lỗi', 'Không thể cập nhật giỏ hàng', 'error');
                    } else {
                        alert('Không thể cập nhật giỏ hàng');
                    }
                });
            } catch (error) {
                console.error('Error in updateCartItem:', error);
            }
        }
        
        // Remove item from cart
        function removeFromCart(productId, variantId, variantAttributes) {
            try {
                const confirmMessage = 'Bạn có chắc muốn xóa sản phẩm này khỏi giỏ hàng?';
                
                if (typeof Swal !== 'undefined') {
                    Swal.fire({
                        title: 'Xác nhận',
                        text: confirmMessage,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'Xóa',
                        cancelButtonText: 'Hủy'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            performRemoveFromCart(productId, variantId, variantAttributes);
                        }
                    });
                } else {
                    if (confirm(confirmMessage)) {
                        performRemoveFromCart(productId, variantId, variantAttributes);
                    }
                }
            } catch (error) {
                console.error('Error in removeFromCart:', error);
            }
        }
        
        // Perform the actual removal
        function performRemoveFromCart(productId, variantId, variantAttributes) {
            try {
                const userId = getCookie('UserId');
                if (!userId) {
                    if (typeof Swal !== 'undefined') {
                        Swal.fire('Lỗi', 'Vui lòng đăng nhập để xóa sản phẩm', 'error');
                    } else {
                        alert('Vui lòng đăng nhập để xóa sản phẩm');
                    }
                    return;
                }
                
                // Ensure variantId is always a number or null
                let variantIdNum = null;
                if (variantId && variantId !== "" && variantId !== "null") {
                    variantIdNum = parseInt(variantId);
                }
                
                const data = {
                    productId: productId,
                    variantId: variantIdNum,
                    variantAttributes: variantAttributes // Pass variantAttributes
                };
                
                console.log('Original variantId:', variantId);
                console.log('Original variantId type:', typeof variantId);
                console.log('JSON stringified data:', JSON.stringify(data));
                
                console.log('Removing from cart:', data);
                console.log('variantId type:', typeof data.variantId);
                console.log('variantId value:', data.variantId);
                console.log('Original variantId:', variantId);
                console.log('Original variantId type:', typeof variantId);
                
                fetch('/api/Cart/remove', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                })
                .then(response => {
                    console.log('Remove response status:', response.status);
                    return response.json();
                })
                .then(result => {
                    console.log('Remove result:', result);
                    if (result.success) {
                        if (typeof Swal !== 'undefined') {
                            Swal.fire('Thành công', 'Đã xóa sản phẩm khỏi giỏ hàng', 'success')
                            .then(() => {
                                location.reload();
                            });
                        } else {
                            alert('Đã xóa sản phẩm khỏi giỏ hàng');
                            location.reload();
                        }
                    } else {
                        if (typeof Swal !== 'undefined') {
                            Swal.fire('Lỗi', result.message || 'Có lỗi xảy ra', 'error');
                        } else {
                            alert(result.message || 'Có lỗi xảy ra');
                        }
                    }
                })
                .catch(error => {
                    console.error('Error removing from cart:', error);
                    if (typeof Swal !== 'undefined') {
                        Swal.fire('Lỗi', 'Không thể xóa sản phẩm', 'error');
                    } else {
                        alert('Không thể xóa sản phẩm');
                    }
                });
            } catch (error) {
                console.error('Error in performRemoveFromCart:', error);
            }
        }
        
        // Proceed to checkout
        function proceedToCheckout() {
            try {
                const userId = getCookie('UserId');
                if (!userId) {
                    const message = 'Vui lòng đăng nhập để tiến hành thanh toán';
                    
                    if (typeof Swal !== 'undefined') {
                        Swal.fire({
                            title: 'Yêu cầu đăng nhập',
                            text: message,
                            icon: 'info',
                            showCancelButton: true,
                            confirmButtonText: 'Đăng nhập',
                            cancelButtonText: 'Hủy'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                window.location.href = '/LoginPage/Login';
                            }
                        });
                    } else {
                        if (confirm(message + '\nBạn có muốn đăng nhập không?')) {
                            window.location.href = '/LoginPage/Login';
                        }
                    }
                    return;
                }
                
                // Show confirmation dialog
                const message = 'Bạn sẽ được chuyển đến trang thanh toán để xác nhận đơn hàng. Bạn có muốn tiếp tục không?';
                
                if (typeof Swal !== 'undefined') {
                    Swal.fire({
                        title: 'Xác nhận thanh toán',
                        text: message,
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonText: 'Tiếp tục',
                        cancelButtonText: 'Hủy'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.href = '/OrderPage';
                        }
                    });
                } else {
                    if (confirm(message)) {
                        window.location.href = '/OrderPage';
                    }
                }
            } catch (error) {
                console.error('Error in proceedToCheckout:', error);
            }
        }
    </script>
} 